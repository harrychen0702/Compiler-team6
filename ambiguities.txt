//*This document is used to show and explain ambiguities that present in the specification.*/

Paragraph: 3
Problem: It is not clear whether we can write “#” and ”/“ together as a content of comment , like “/# #/ #/”.
Our solution: This is not possible in many other languages, so our compiler does not accept this syntax.

Paragraph: 8
Problem: The spec has a assignment that used “{1:T}” as a pair in the dictionary: “dict<int, top> := {1:1, … , {1:T}}”. 
Our solution: In the case of {1:T}, we think it is a mistake and our compiler does not accept this syntax.

Paragraph: 8
Problem: It is not clear whether we can use all primitive type for the key in the dictionary, since the spec only gives examples that keys are all declared in “int” type.
Our solution: This is possible in many other languages, so our compiler accept this syntax.

Paragraph: 9
Problem: The spec has a assignment that written as: “s:seq<top> s := […];”. It is not clear that what is the purpose of the second “s”.
Our solution: We think it is a mistake and our compiler does not accept this syntax.

Paragraph: 10
Problem: The spec has not give us a definition of “String”, so our compiler cannot recognize   “seq<char> := “hello world””.
Our solution: We think it is a mistake, so we declare “String“ in the lexer.

Paragraph: 11
Problem: It is not clear whether we can write “[:]” as sequence slicing.
Our solution: This is possible in many other languages like python, so our compiler accept this syntax.

Paragraph: 11
Problem: It is not clear whether we can write s[-3] when s is a sequence that shorter than 3.
Our solution: This is not possible in many other languages, so our compiler does not accept this syntax.

Paragraph: 12
Problem: It is not clear whether we can connect two sequences that have different type.
Our solution: This is possible in many other languages when the combined sequences declared in “top” type so our compiler accept this syntax.

Paragraph: 13
Problem: It is not clear that what is the type of parameters in the “alias”. The spec gives two examples: “alias old_name new_name” and “alias seq<char> string”, and it is not clear about the type of these parameters.
Our solution: We think it is a mistake and we set the first parameter to be a data type (both basic data type and aggregate data type) and the second parameter to be an identifier.








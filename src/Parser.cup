import java_cup.runtime.*;//预先声明
//import sym;
parser code
{:
  //java code, 这个处理器代码将被直接放在产生的处理器的类定义中
    public boolean syntaxErrors = false;
    public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error(
        "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null
    );
    }
:}

//terminals and nonterminal 终结符和非终结符的说明
//终结符声明的语法是：terminal classname name1; classname 是对象的类型，如 整数(Integer)

// terminals

terminal MAIN,CHAR_LITERAL,FLOAT_LITERAL,INT_LITERAL,RAT_LITERAL,STRING_LITERAL,BOOL_LITERAL,IDENTIFIER;

terminal PLUS,MINUS,TIMES,DIVIDE,POWER,MOD,UMINUS;

terminal COMMA,COLON,LBRACE,RBRACE,SEMICOLON,LPAREN,RPAREN,DOT,QUESTION;

terminal DICT,SEQ,TOP,LEN,INT,CHAR,RAT,FLOAT,TDEF,FDEF,BOOL,ALIAS,NUMBER;

terminal NULL;

terminal NOT,AND,OR,IMPLICATION,ASSIGN;

terminal READ,PRINT,IF,THEN,ENDIF,LOOP,POOL,ELSE,BREAK,RETURN;

terminal IN,CONCATENATION,RIGHT_SHARP;

terminal LEFT_SHARP,LEFT_SHARP_EQUAL,EQUAL,NOT_EQUAL,LEFT_SQUARE_BRACKET,RIGHT_SQUARE_BRACKET;

//************Nonterminal***************
non terminal program, main_function, other_functions;

non terminal variable_declaration,function_declaration,expr,stmt;

non terminal declaration_list,basic_data_type,aggregate_data_type,data_type;

non terminal body;

// Eliminating Ambiguity   终结符的优先级和结合性 (消除二义性)
//Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
precedence left CONCATENATION, AND, OR;
precedence right POWER, IN;
//precedence nonassoc NOT, L_ANGLE, LESSEQ, EQEQ, NOTEQ, L_SQUARE;






//********Productions*****************
start with program;
program ::= main_function
          | other_functions main_function
          | main_function other_functions
          | other_functions main_function other_functions;
//program ::=MAIN LBRACE RETURN SEMICOLON RBRACE SEMICOLON;

basic_data_type ::= BOOL
                  | INT
                  | RAT
                  | FLOAT
                  | CHAR
                  | SEQ LEFT_SHARP basic_data_type RIGHT_SHARP
                  | TOP;
                  
aggregate_data_type ::= DICT LEFT_SHARP basic_data_type COMMA basic_data_type RIGHT_SHARP
                      | SEQ LEFT_SHARP basic_data_type RIGHT_SHARP;

data_type ::= basic_data_type
            | aggregate_data_type;

declaration_list ::= IDENTIFIER COLON data_type
                   | IDENTIFIER COLON data_type COMMA declaration_list;
                   

variable_declaration ::= TDEF IDENTIFIER LBRACE declaration_list RBRACE SEMICOLON
              | ALIAS data_type IDENTIFIER SEMICOLON;

function_declaration ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRACE body RBRACE COLON data_type SEMICOLON
                       | FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRACE body RBRACE SEMICOLON;

body ::=;

//************Expression*******************
operator ::= PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER
           | IN
           | CONCATENATION
           | ASSIGN
           | DOT;

statement ::= other_variable operator other_variable
            | statement operator statement;

boolean ::= TRUE | FALSE;

other_variable_list ::= other_variable
                      | other_variable COMMA other_variable
                      | ;
other_variable ::= IDENTIFIER
                 | NUMBER
                 | QUESTION TRUE QUESTION IDENTIFIER LPAREN other_variable_list RPAREN
                 | QUESTION FALSE QUESTION IDENTIFIER LPAREN other_variable_list RPAREN
                 {:RESULT= NULL;:};











//seq.len
//returntype
//function name




















//Written by Hao Chen, XiaoFeng Fu, And Wentao Wei

import java_cup.runtime.*;//预先声明
//import sym;
parser code
{:
  //java code, 这个处理器代码将被直接放在产生的处理器的类定义中
    public boolean syntaxErrors = false;
    public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error(
        "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null
    );
    }
:}

//terminals and nonterminal 终结符和非终结符的说明
//终结符声明的语法是：terminal classname name1; classname 是对象的类型，如 整数(Integer)

// terminals

terminal MAIN,CHAR_LITERAL,FLOAT_LITERAL,INT_LITERAL,RAT_LITERAL,STRING_LITERAL,IDENTIFIER,NUMBER;

terminal PLUS,MINUS,TIMES,DIVIDE,POWER,MOD,UMINUS;

terminal COMMA,COLON,LBRACE,RBRACE,SEMICOLON,LPAREN,RPAREN,DOT,QUESTION;

terminal DICT,SEQ,TOP,LEN,INT,CHAR,RAT,FLOAT,TDEF,FDEF,BOOL,ALIAS;

terminal NULL,ASSIGN,TRUE,FALSE;

terminal NOT,AND,OR,IMPLICATION;

terminal READ,PRINT,IF,THEN,ENDIF,LOOP,POOL,ELSE,BREAK,RETURN;

terminal IN,CONCATENATION,RIGHT_SHARP;

terminal LEFT_SHARP,LEFT_SHARP_EQUAL,EQUAL,NOT_EQUAL,LEFT_SQUARE_BRACKET,RIGHT_SQUARE_BRACKET;



//************Nonterminal***************
non terminal program, main_function, other_functions,function;

non terminal declaration,term,stmt,stmts,stmts_loop,num_expr,bool_expr,con_expr,expr;

non terminal stmt_return,stmt_break,stmt_ifelse,stmt_loop,num_literal,num_type,primitive_type,primitive_literal,seq_literal_1,dict_literal;

non terminal declaration_list_type,declaration_list_func,decl_variable,decl_dict,decl_seq,seq_value,decl_tdef,decl_alias,decl_fdef,decl_tdef_assign;

non terminal dict_context,seq_context,bi_operator,value_list,seq_index,seq_type,seq_expr,seq_literal_2,seq_literal;

non terminal data_literal,aggregate_data_type,top_type,tdef_assign,func_call;

non terminal key_type,value_literal,top,value_type,char_expr,char_literal,expr_list;

non terminal boolean,bool_literal,key_literal,top_literal;

non terminal aggre_literal,aggre_type,num_value_list,bool_value_list,compare_operator,assignment;

non terminal basic_term,num_term,bool_term,char_term,seq_term;

non terminal num_operator,bool_operator,char_operator,seq_operator,expr_without_bool,in_expr,com_operator,all_bool_operator,con_operator;

// Eliminating Ambiguity   终结符的优先级和结合性 (消除二义性)
//Precedences
precedence left LEFT_SHARP,LEFT_SHARP_EQUAL,IMPLICATION,RIGHT_SHARP;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
precedence left CONCATENATION, AND, OR;
precedence right POWER, IN;
precedence left LPAREN, RPAREN;
//precedence nonassoc EQUAL,NOT_EQUAL,IMPLICATION;
//precedence nonassoc NOT, L_ANGLE, LESSEQ, EQEQ, NOTEQ, L_SQUARE;



//CFG 文法

//在文法中的每一个产生式有一个非终结符在左边，然后是 ::=，其后是零个或多个动作，终结符，非终结符等，再后面是一个分号



//********Productions*****************
start with program;
program ::= main_function
          | other_functions main_function
          | main_function other_functions
          | other_functions main_function other_functions;

other_functions::= declaration SEMICOLON
                  |declaration SEMICOLON other_functions;

main_function::=MAIN LBRACE stmts RBRACE SEMICOLON;
//---------------------------stmt-------------------

stmts::=stmt stmts|
        stmt;


stmt::= stmt_return SEMICOLON
       |declaration SEMICOLON
       |READ IDENTIFIER SEMICOLON
       |PRINT expr SEMICOLON
       |assignment SEMICOLON
       |stmt_break SEMICOLON
       |func_call SEMICOLON
       |stmt_loop
       |stmt_ifelse;

stmt_break::=BREAK
            |BREAK INT_LITERAL;

stmt_return::=RETURN  expr
             |RETURN;

stmt_ifelse::=  IF LPAREN expr RPAREN THEN stmts ENDIF
               |IF LPAREN expr RPAREN THEN stmts ELSE stmts ENDIF;

stmt_loop::= LOOP stmts POOL
            |LOOP POOL;


assignment::=IDENTIFIER ASSIGN expr
             |IDENTIFIER DOT IDENTIFIER ASSIGN expr
             |IDENTIFIER LEFT_SQUARE_BRACKET IDENTIFIER RIGHT_SQUARE_BRACKET ASSIGN expr;
//expression list is the same as the type definition assignment

expr_list::=tdef_assign
           |;


func_call::=QUESTION expr QUESTION IDENTIFIER LPAREN expr_list RPAREN;

bool_literal::=TRUE|FALSE;

primitive_type::=BOOL|num_type|CHAR;

primitive_literal::=CHAR_LITERAL|num_literal|STRING_LITERAL|bool_literal;

num_type::=INT|RAT|FLOAT;

num_literal::=INT_LITERAL|FLOAT_LITERAL|RAT_LITERAL;

top_literal::=data_literal;

aggre_type::=SEQ LEFT_SHARP seq_type RIGHT_SHARP;

seq_type::=key_type;

aggre_literal::=seq_literal
                |dict_literal;

seq_literal ::=seq_literal_2|seq_literal_1;
seq_literal_1::=LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET;

seq_literal_2::=IDENTIFIER LEFT_SQUARE_BRACKET seq_index RIGHT_SQUARE_BRACKET;

seq_index::= expr COLON
            |COLON expr
            |expr COLON expr;

dict_literal::=LBRACE dict_context RBRACE;

data_literal::=primitive_literal
               |aggre_literal
               ;
top_type::=key_type|aggre_type;


//--------------------------------dictionary---------------------
decl_dict::=IDENTIFIER COLON DICT LEFT_SHARP key_type COMMA value_type RIGHT_SHARP ASSIGN LBRACE dict_context RBRACE
            |IDENTIFIER COLON DICT LEFT_SHARP key_type COMMA value_type RIGHT_SHARP ASSIGN IDENTIFIER;

//
dict_context::=key_literal COLON value_literal
              |key_literal COLON value_literal COMMA dict_context
              |;
key_type::=primitive_type|TOP|IDENTIFIER;

key_literal::=expr;

value_type::=key_type;

value_literal::=expr;

//----------------------------Sequence-------------------

decl_seq::=IDENTIFIER COLON SEQ LEFT_SHARP key_type RIGHT_SHARP ASSIGN expr;


seq_value::=expr;

seq_context::= seq_value
              |seq_value COMMA seq_context
              |;


//--------------------declaration------------------
decl_variable::=IDENTIFIER COLON key_type ASSIGN tdef_assign
                |IDENTIFIER COLON key_type
                ;


tdef_assign::=expr|
              expr COMMA tdef_assign;

decl_tdef::=TDEF IDENTIFIER LBRACE declaration_list_type RBRACE;

decl_fdef::=FDEF IDENTIFIER LPAREN declaration_list_func RPAREN LBRACE stmts RBRACE
            |FDEF IDENTIFIER LPAREN declaration_list_func RPAREN LBRACE stmts RBRACE COLON top_type;



declaration ::= decl_dict
              | decl_variable
              | decl_seq
              | decl_alias
              | decl_tdef
              | decl_fdef
              ;

decl_alias::=ALIAS top_type IDENTIFIER;

declaration_list_type ::= IDENTIFIER COLON top_type
                       | IDENTIFIER COLON top_type COMMA declaration_list_type
                       ;

declaration_list_func ::= IDENTIFIER COLON top_type
                        | IDENTIFIER COLON top_type COMMA declaration_list_func
                        |
                        ;
//--------------------term and operator---------------
bi_operator::=
             PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER
           | CONCATENATION
           | AND
           | OR
           | IMPLICATION
           | EQUAL
           | NOT_EQUAL
           | LEFT_SHARP
           | RIGHT_SHARP
           | LEFT_SHARP_EQUAL
           | IN;





num_value_list::=num_literal

            //  |IDENTIFIER DOT LEN
            // |IDENTIFIER num_operator num_value_list
             ;



//term::=num_expr
//      |bool_expr
//      //|con_expr
//      |char_expr
//      |func_call
//      |LPAREN term RPAREN
//      |LPAREN term bi_operator expr RPAREN
//      |IDENTIFIER
//      |NOT term
//      |seq_literal_1
//      |seq_literal_2
//      |IDENTIFIER DOT IDENTIFIER
//      |IDENTIFIER DOT LEN
//      |IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
//      |MINUS term
//   //   |IDENTIFIER LEFT_SQUARE_BRACKET IDENTIFIER RIGHT_SQUARE_BRACKET
//
//      ;

term::=basic_term;

char_literal::=STRING_LITERAL
                  |CHAR_LITERAL;


//con_expr::=
//            seq_literal_1 CONCATENATION seq_literal_1
//          | IDENTIFIER CONCATENATION seq_literal_1
//          | seq_literal_1 CONCATENATION IDENTIFIER
//          | IDENTIFIER CONCATENATION IDENTIFIER
//          | seq_literal_1 CONCATENATION con_expr
//          | IDENTIFIER CONCATENATION con_expr
//          | con_expr CONCATENATION seq_literal_1
//          | con_expr CONCATENATION IDENTIFIER
//          | con_expr CONCATENATION con_expr
//          ;

bool_value_list::=bool_literal;

value_list::=bool_value_list|char_literal|num_value_list|IDENTIFIER;

//seq_expr::=LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET;

//bool_expr::= bool_value_list
//            //bool_value_list bool_operator bool_expr
//            //|num_expr compare_operator num_expr
//             //|key_type IN aggre_literal
//             ;
//         //   |NOT bool_expr;

expr::=basic_term
       |num_expr
       |bool_expr
       |char_expr
       |seq_expr
       |LPAREN expr RPAREN;

expr_without_bool::=basic_term
                   |num_expr
                   |char_expr
                   |seq_expr
                   |LPAREN expr RPAREN;
basic_term::= IDENTIFIER
             |IDENTIFIER DOT IDENTIFIER
             |func_call
             |IDENTIFIER LEFT_SQUARE_BRACKET IDENTIFIER RIGHT_SQUARE_BRACKET
             |LPAREN basic_term RPAREN
             |IDENTIFIER LEFT_SQUARE_BRACKET  INT_LITERAL RIGHT_SQUARE_BRACKET
             ;

num_term::=num_literal
          |IDENTIFIER DOT LEN;

bool_term::=bool_literal;

char_term::=char_literal;
            
seq_term::=seq_literal_1|seq_literal_2;

num_operator ::=
             PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER;

bool_operator::= AND
                |OR
                |com_operator
                //|IN
                // expr IN SEQLITERAL
                // NOT bool expr
                ;
com_operator::= IMPLICATION
               |EQUAL
               |NOT_EQUAL;

con_operator::= AND
                |OR;

compare_operator::= LEFT_SHARP
                   |RIGHT_SHARP
                   |LEFT_SHARP_EQUAL
                   |com_operator;
all_bool_operator::=
                 AND
                |OR
                |LEFT_SHARP
                |RIGHT_SHARP
                |LEFT_SHARP_EQUAL
                |com_operator;

char_operator::=;

seq_operator::=CONCATENATION;

num_expr::= num_term

           |num_term num_operator num_expr
           |num_expr num_operator num_expr


           |basic_term num_operator num_expr
           |basic_term num_operator basic_term
           |num_term num_operator basic_term

           |MINUS num_expr

           |LPAREN num_expr RPAREN
           |LPAREN num_expr RPAREN num_operator num_expr

           ;

in_expr::=expr_without_bool IN seq_literal
          |expr_without_bool IN basic_term;

bool_expr::= bool_term

//            |bool_term con_operator bool_expr
//            |basic_term con basic_term
//            |basic_term con_operator bool_expr
//            |bool_term bool_operator basic_term
//            |bool_expr bool_operator basic_term
            |bool_term bool_operator bool_term
            |bool_term bool_operator bool_term con_operator bool_expr
            |basic_term bool_operator bool_term
            |basic_term bool_operator bool_term con_operator bool_expr
            |bool_term bool_operator basic_term
            |bool_term bool_operator basic_term con_operator bool_expr
            |basic_term all_bool_operator basic_term
            |basic_term all_bool_operator basic_term con_operator bool_expr

            |NOT bool_expr

            |in_expr
            |in_expr  con_operator bool_expr


            |num_expr compare_operator num_expr
            |num_expr compare_operator num_expr con_operator bool_expr
            |num_expr compare_operator basic_term
            |num_expr compare_operator basic_term con_operator bool_expr
            |basic_term all_bool_operator num_expr
            |basic_term all_bool_operator num_expr con_operator bool_expr
        //    |basic_term compare_operator num_expr con_operator
//
//            |basic_term compare_operator num_expr
//            |basic_term compare_operator basic_term
//
//            |expr_without_bool EQUAL expr_without_bool
//            |expr_without_bool NOT_EQUAL expr_without_bool
//
//            |bool_expr bool_operator bool_expr
            |LPAREN bool_expr RPAREN
            |LPAREN bool_expr RPAREN con_operator bool_expr

            |bool_expr con_operator bool_expr
          //  |LPAREN bool_expr RPAREN bool_operator LPAREN bool_expr RPAREN
            ;
char_expr::=char_literal
            |LPAREN char_expr RPAREN;

seq_expr::= seq_term
           |seq_term seq_operator seq_expr
           |basic_term seq_operator seq_expr
           |basic_term seq_operator basic_term
           |seq_term seq_operator basic_term
           |seq_expr seq_operator basic_term
           |seq_expr seq_operator seq_expr
           |LPAREN seq_expr RPAREN
           |LPAREN seq_expr RPAREN seq_operator seq_expr;













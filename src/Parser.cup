import java_cup.runtime.*;//预先声明
//import sym;
parser code
{:
  //java code, 这个处理器代码将被直接放在产生的处理器的类定义中
    public boolean syntaxErrors = false;
    public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error(
        "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null
    );
    }
:}

//terminals and nonterminal 终结符和非终结符的说明
//终结符声明的语法是：terminal classname name1; classname 是对象的类型，如 整数(Integer)

// terminals

terminal MAIN,CHAR_LITERAL,FLOAT_LITERAL,INT_LITERAL,RAT_LITERAL,STRING_LITERAL,IDENTIFIER,NUMBER;

terminal PLUS,MINUS,TIMES,DIVIDE,POWER,MOD,UMINUS;

terminal COMMA,COLON,LBRACE,RBRACE,SEMICOLON,LPAREN,RPAREN,DOT,QUESTION;

terminal DICT,SEQ,TOP,LEN,INT,CHAR,RAT,FLOAT,TDEF,FDEF,BOOL,ALIAS;

terminal NULL,ASSIGN,TRUE,FALSE;

terminal NOT,AND,OR,IMPLICATION;

terminal READ,PRINT,IF,THEN,ENDIF,LOOP,POOL,ELSE,BREAK,RETURN;

terminal IN,CONCATENATION,RIGHT_SHARP;

terminal LEFT_SHARP,LEFT_SHARP_EQUAL,EQUAL,NOT_EQUAL,LEFT_SQUARE_BRACKET,RIGHT_SQUARE_BRACKET;



//************Nonterminal***************
non terminal program, main_function, other_functions,function;

non terminal declaration,expr,stmt,stmts,num_expr,bool_expr,con_expr,exprs;

non terminal stmt_return,stmt_break,stmt_ifelse,stmt_loop,num_literal,num_type,primitive_type,primitive_literal,seq_literal,dict_literal;

non terminal declaration_list,decl_primitive,decl_dict,decl_seq,seq_value,decl_tdef,decl_alias,decl_fdef,decl_tdef_assign;

non terminal dict_context,seq_context,bi_operator,value_list,seq_index,seq_type;

non terminal basic_data_type,data_literal,aggregate_data_type,data_type,tdef_assign,func_call;

non terminal key,value,top,value_type,char_expr,char_value_list,expr_list;

non terminal num_operator,bool_operator,boolean,other_variable_list,other_variable,bool_literal,key_literal,top_literal;

non terminal aggre_literal,aggre_type,num_value_list,bool_value_list,compare_operator,assignment;

// Eliminating Ambiguity   终结符的优先级和结合性 (消除二义性)
//Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
precedence left CONCATENATION, AND, OR;
precedence right POWER, IN;
//precedence nonassoc NOT, L_ANGLE, LESSEQ, EQEQ, NOTEQ, L_SQUARE;


//CFG 文法

//在文法中的每一个产生式有一个非终结符在左边，然后是 ::=，其后是零个或多个动作，终结符，非终结符等，再后面是一个分号



//********Productions*****************
start with program;
program ::= main_function
          | other_functions main_function
          | main_function other_functions
          | other_functions main_function other_functions;


main_function::=MAIN LBRACE stmts RBRACE SEMICOLON;
//---------------------------stmt-------------------
stmts::=stmt stmts|
        stmt;

//stmt::=stmt_return SEMICOLON
//       |declaration SEMICOLON
//       |READ IDENTIFIER SEMICOLON
//       |PRINT exprs SEMICOLON
//       |assignment SEMICOLON;

stmt_return::=RETURN  exprs|RETURN;

stmt::=stmt_return SEMICOLON
       |declaration SEMICOLON
       |READ IDENTIFIER SEMICOLON
       |PRINT exprs SEMICOLON
       |assignment SEMICOLON
       |stmt_break SEMICOLON
       |func_call SEMICOLON
       |stmt_loop
       |stmt_ifelse;

stmt_break::=BREAK
            |BREAK INT_LITERAL;

stmt_ifelse::=  IF LPAREN exprs RPAREN THEN stmts ENDIF
               |IF LPAREN exprs RPAREN THEN stmts ELSE stmts ENDIF;


stmt_loop::= LOOP stmts POOL
            |LOOP POOL;


assignment::=IDENTIFIER ASSIGN exprs;


other_functions::= declaration SEMICOLON
                  |declaration SEMICOLON other_functions;

//other_functions::= declaration SEMICOLON
//                  |declaration SEMICOLON other_functions;


//function::=decl_fdef SEMICOLON;

expr_list::=tdef_assign
            |;

func_call::=QUESTION exprs QUESTION IDENTIFIER LPAREN expr_list RPAREN;

bool_literal::=TRUE|FALSE;

primitive_type::=BOOL|num_type|CHAR;

primitive_literal::=CHAR_LITERAL|num_literal|STRING_LITERAL|bool_literal;

num_type::=INT|RAT|FLOAT;

num_literal::=INT_LITERAL|FLOAT_LITERAL|RAT_LITERAL;

top::=data_type;

top_literal::=data_literal;

aggre_type::=SEQ LEFT_SHARP seq_type RIGHT_SHARP;

seq_type::=key|IDENTIFIER;

aggre_literal::=seq_literal
                |dict_literal
                ;
seq_literal::=LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET
              |IDENTIFIER LEFT_SQUARE_BRACKET seq_index RIGHT_SQUARE_BRACKET;

seq_index::=exprs COLON
            |COLON exprs
            |exprs COLON exprs;

            //  |IDENTIFIER LEFT_SQUARE_BRACKET num_value_list COLON
            //  |IDENTIFIER LEFT_SQUARE_BRACKET num_value_list COLON num_value_list
            //  |IDENTIFIER LEFT_SQUARE_BRACKET COLON num_value_list

dict_literal::=LBRACE dict_context RBRACE;

data_literal::=primitive_literal
               |aggre_literal
               ;
data_type::=primitive_type|aggre_type;


//--------------------------------dictionary---------------------
decl_dict::=IDENTIFIER COLON DICT LEFT_SHARP key COMMA value_type RIGHT_SHARP ASSIGN LBRACE dict_context RBRACE
            |IDENTIFIER COLON DICT LEFT_SHARP key COMMA value_type RIGHT_SHARP ASSIGN IDENTIFIER;

//
dict_context::=key_literal COLON value
              |key_literal COLON value COMMA dict_context
              |;
key::=primitive_type|TOP;

key_literal::=num_expr;

value_type::=top;

value::=top_literal;

//----------------------------Sequence-------------------

decl_seq::=IDENTIFIER COLON SEQ LEFT_SHARP key RIGHT_SHARP ASSIGN LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET
           |IDENTIFIER COLON SEQ LEFT_SHARP key RIGHT_SHARP ASSIGN exprs
           |IDENTIFIER COLON SEQ LEFT_SHARP IDENTIFIER RIGHT_SHARP ASSIGN LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET
           |IDENTIFIER COLON SEQ LEFT_SHARP IDENTIFIER RIGHT_SHARP ASSIGN exprs;

seq_value::=data_literal
           | IDENTIFIER;

seq_context::= seq_value
              |seq_value COMMA seq_context
              |;


//--------------------declaration------------------
decl_primitive::=IDENTIFIER COLON key ASSIGN exprs
                |IDENTIFIER COLON key
                |IDENTIFIER COLON IDENTIFIER;

decl_tdef_assign::=IDENTIFIER COLON IDENTIFIER ASSIGN tdef_assign;

tdef_assign::=exprs|
              exprs COMMA tdef_assign;

decl_tdef::=TDEF IDENTIFIER LBRACE declaration_list RBRACE;

decl_fdef::=FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRACE stmts RBRACE
            |FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRACE stmts RBRACE COLON data_type;



declaration ::= decl_dict
              | decl_primitive
              | decl_seq
              | decl_alias
              | decl_tdef
              | decl_fdef
              | decl_tdef_assign;

decl_alias::=ALIAS IDENTIFIER IDENTIFIER
            |ALIAS data_type IDENTIFIER
            ;

declaration_list ::= IDENTIFIER COLON data_type
                   | IDENTIFIER COLON IDENTIFIER
                   | IDENTIFIER COLON IDENTIFIER COMMA declaration_list
                   | IDENTIFIER COLON data_type COMMA declaration_list
                   |
                   ;
//--------------------expr and operator---------------
bi_operator::=
             PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER
           | CONCATENATION
           | AND
           | OR
           | IMPLICATION
           | EQUAL
           | NOT_EQUAL
           | LEFT_SHARP
           | RIGHT_SHARP
           | LEFT_SHARP_EQUAL
           |IN;



bool_operator::= AND
                |OR
                |IMPLICATION
                |EQUAL
                |NOT_EQUAL;

compare_operator::=LEFT_SHARP
                   |RIGHT_SHARP
                   |IMPLICATION
                   |LEFT_SHARP_EQUAL
                   |EQUAL
                   |NOT_EQUAL;


num_expr::=num_value_list;

num_value_list::=
              num_literal
             |IDENTIFIER LEFT_SQUARE_BRACKET num_value_list RIGHT_SQUARE_BRACKET
             |IDENTIFIER LEFT_SQUARE_BRACKET IDENTIFIER RIGHT_SQUARE_BRACKET
             |IDENTIFIER DOT LEN
            // |IDENTIFIER num_operator num_value_list
             ;
num_operator ::=
             PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER
           | CONCATENATION;

exprs::=expr
       // |exprs bi_operator exprs
        |expr bi_operator exprs;
//        |LPAREN expr bi_operator exprs RPAREN;
       // |exprs bi_operator expr;



expr::=num_expr
      |bool_expr
      |con_expr
      |char_expr
      |func_call
      |LPAREN expr RPAREN
      |LPAREN expr bi_operator expr RPAREN
      |IDENTIFIER
      |NOT expr;

char_value_list::=STRING_LITERAL
                  |CHAR_LITERAL;

char_expr::= char_value_list;

con_expr::=seq_literal CONCATENATION seq_literal
          | IDENTIFIER CONCATENATION seq_literal
          | seq_literal CONCATENATION IDENTIFIER
          | IDENTIFIER CONCATENATION IDENTIFIER
          | seq_literal CONCATENATION con_expr
          | IDENTIFIER CONCATENATION con_expr
          | con_expr CONCATENATION seq_literal
          | con_expr CONCATENATION IDENTIFIER
          | con_expr CONCATENATION con_expr
          ;

bool_value_list::=bool_literal;

value_list::=bool_value_list|char_value_list|num_value_list|IDENTIFIER;

bool_expr::= bool_value_list
            //bool_value_list bool_operator bool_expr
            //|num_expr compare_operator num_expr
            |key IN aggre_literal;
         //   |NOT bool_expr;


//other_variable_list ::= other_variable
//                      | other_variable COMMA other_variable
//                      | ;
//
//other_variable ::= IDENTIFIER
//                 | NUMBER
//                 | QUESTION boolean QUESTION IDENTIFIER LPAREN other_variable_list RPAREN;
//seq.len
//returntype
//function name



















import java_cup.runtime.*;//预先声明
//import sym;
parser code
{:
  //java code, 这个处理器代码将被直接放在产生的处理器的类定义中
    public boolean syntaxErrors = false;
    public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error(
        "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null
    );
    }
:}

//terminals and nonterminal 终结符和非终结符的说明
//终结符声明的语法是：terminal classname name1; classname 是对象的类型，如 整数(Integer)

// terminals

terminal MAIN,CHAR_LITERAL,FLOAT_LITERAL,INT_LITERAL,RAT_LITERAL,STRING_LITERAL,IDENTIFIER,NUMBER;

terminal PLUS,MINUS,TIMES,DIVIDE,POWER,MOD,UMINUS;

terminal COMMA,COLON,LBRACE,RBRACE,SEMICOLON,LPAREN,RPAREN,DOT,QUESTION;

terminal DICT,SEQ,TOP,LEN,INT,CHAR,RAT,FLOAT,TDEF,FDEF,BOOL,ALIAS;

terminal NULL,ASSIGN,TRUE,FALSE;

terminal NOT,AND,OR,IMPLICATION;

terminal READ,PRINT,IF,THEN,ENDIF,LOOP,POOL,ELSE,BREAK,RETURN;

terminal IN,CONCATENATION,RIGHT_SHARP;

terminal LEFT_SHARP,LEFT_SHARP_EQUAL,EQUAL,NOT_EQUAL,LEFT_SQUARE_BRACKET,RIGHT_SQUARE_BRACKET;



//************Nonterminal***************
non terminal program, main_function, other_functions,function;

non terminal declaration,expr,stmt,stmts;

non terminal stmt_return,num,num_type,primitive_type,primitive_value;

non terminal declaration_list,decl_primitive,decl_dict,decl_seq;

non terminal dict_context,seq_context;

non terminal basic_data_type,data_type,aggregate_data_type;

non terminal key,value,top;

non terminal operator,boolean,other_variable_list,other_variable;
// Eliminating Ambiguity   终结符的优先级和结合性 (消除二义性)
//Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
precedence left CONCATENATION, AND, OR;
precedence right POWER, IN;
//precedence nonassoc NOT, L_ANGLE, LESSEQ, EQEQ, NOTEQ, L_SQUARE;



//CFG 文法

//在文法中的每一个产生式有一个非终结符在左边，然后是 ::=，其后是零个或多个动作，终结符，非终结符等，再后面是一个分号



//********Productions*****************
start with program;
program ::=  main_function
          | other_functions main_function
          | main_function other_functions
          | other_functions main_function other_functions;

//main_function ::=MAIN LBRACE RETURN SEMICOLON RBRACE SEMICOLON;
main_function::=MAIN LBRACE stmts RBRACE SEMICOLON;

stmts::=stmt stmt|
        stmt;

stmt::=stmt_return SEMICOLON
       |declaration SEMICOLON ;

stmt_return::=RETURN num|RETURN;

num::=INT_LITERAL|FLOAT_LITERAL|RAT_LITERAL;

other_functions::= function function|function;

function::=FDEF IDENTIFIER LPAREN;

basic_data_type ::= BOOL
                  | num_type
                  | CHAR
                  | SEQ LEFT_SHARP basic_data_type RIGHT_SHARP
                  | TOP;

primitive_type::=BOOL|num_type|CHAR;

primitive_value::=CHAR_LITERAL|FLOAT_LITERAL|INT_LITERAL|RAT_LITERAL|STRING_LITERAL|BOOL_LITERAL;

num_type::=INT|RAT|FLOAT;


//aggregate_data_type ::= DICT LEFT_SHARP basic_data_type COMMA basic_data_type RIGHT_SHARP
//                      | SEQ LEFT_SHARP basic_data_type RIGHT_SHARP;
//
//data_type ::= basic_data_type
//            | aggregate_data_type;

declaration_list ::= IDENTIFIER COLON data_type
                   | IDENTIFIER COLON data_type COMMA declaration_list;
//--------------------------------dictionary---------------------
decl_dict::=IDENTIFIER COLON DICT LEFT_SHARP key COMMA value RIGHT_SHARP ASSIGN LBRACE dict_context RBRACE;
decl_primitive::=IDENTIFIER SEMICOLON primitive_type ASSIGN primitive_value;
//
dict_context::=key SEMICOLON value
|key SEMICOLON value COMMA dict_context
|
;

key::=primitive_type;

value::=primitive_type|top;
//----------------------------Sequence-------------------

decl_seq::=IDENTIFIER COLON SEQ LEFT_SHARP value RIGHT_SHARP ASSIGN LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET;

seq_context::=;

//-----------------------------
declaration ::= TDEF IDENTIFIER LBRACE declaration_list RBRACE
              | ALIAS data_type IDENTIFIER
              | decl_dict
              | decl_primitive
              | decl_seq;



operator ::= PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER
           | IN
           | CONCATENATION
           | ASSIGN
           | DOT;


boolean ::= TRUE | FALSE;

other_variable_list ::= other_variable
                      | other_variable COMMA other_variable
                      | ;

other_variable ::= IDENTIFIER
                 | NUMBER
                 | QUESTION boolean QUESTION IDENTIFIER LPAREN other_variable_list RPAREN;
//seq.len
//returntype
//function name



















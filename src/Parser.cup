import java_cup.runtime.*;//预先声明
//import sym;
parser code
{:
  //java code, 这个处理器代码将被直接放在产生的处理器的类定义中
    public boolean syntaxErrors = false;
    public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error(
        "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null
    );
    }
:}

//terminals and nonterminal 终结符和非终结符的说明
//终结符声明的语法是：terminal classname name1; classname 是对象的类型，如 整数(Integer)

// terminals

terminal MAIN,CHAR_LITERAL,FLOAT_LITERAL,INT_LITERAL,RAT_LITERAL,STRING_LITERAL,IDENTIFIER,NUMBER;

terminal PLUS,MINUS,TIMES,DIVIDE,POWER,MOD,UMINUS;

terminal COMMA,COLON,LBRACE,RBRACE,SEMICOLON,LPAREN,RPAREN,DOT,QUESTION;

terminal DICT,SEQ,TOP,LEN,INT,CHAR,RAT,FLOAT,TDEF,FDEF,BOOL,ALIAS;

terminal NULL,ASSIGN,TRUE,FALSE;

terminal NOT,AND,OR,IMPLICATION;

terminal READ,PRINT,IF,THEN,ENDIF,LOOP,POOL,ELSE,BREAK,RETURN;

terminal IN,CONCATENATION,RIGHT_SHARP;

terminal LEFT_SHARP,LEFT_SHARP_EQUAL,EQUAL,NOT_EQUAL,LEFT_SQUARE_BRACKET,RIGHT_SQUARE_BRACKET;



//************Nonterminal***************
non terminal program, main_function, other_functions,function;

non terminal declaration,expr,stmt,stmts,num_expr,bool_expr,con_expr;

non terminal stmt_return,num_literal,num_type,primitive_type,primitive_literal,seq_literal,dict_literal;

non terminal declaration_list,decl_primitive,decl_dict,decl_seq,seq_value;

non terminal dict_context,seq_context;

non terminal basic_data_type,data_literal,aggregate_data_type,data_type;

non terminal key,value,top,value_type;

non terminal num_operater,bool_operator,boolean,other_variable_list,other_variable,bool_literal,key_literal,top_literal;

non terminal aggre_literal,aggre_type,num_value_list,bool_value_list,compare_operator;
// Eliminating Ambiguity   终结符的优先级和结合性 (消除二义性)
//Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
precedence left CONCATENATION, AND, OR;
precedence right POWER, IN;
//precedence nonassoc NOT, L_ANGLE, LESSEQ, EQEQ, NOTEQ, L_SQUARE;



//CFG 文法

//在文法中的每一个产生式有一个非终结符在左边，然后是 ::=，其后是零个或多个动作，终结符，非终结符等，再后面是一个分号



//********Productions*****************
start with program;
program ::=  main_function
          | other_functions main_function
          | main_function other_functions
          | other_functions main_function other_functions;


main_function::=MAIN LBRACE stmts RBRACE SEMICOLON;
//---------------------------stmt
stmts::=stmt stmt|
        stmt;

stmt::=stmt_return SEMICOLON
       |declaration SEMICOLON
       |READ IDENTIFIER SEMICOLON
       |PRINT expr SEMICOLON;
stmt_return::=RETURN num_literal|RETURN;



other_functions::= function function|function;

function::=FDEF IDENTIFIER LPAREN;

//basic_data_type ::= BOOL
//                  | num_type
//                  | CHAR
//                  | SEQ LEFT_SHARP basic_data_type RIGHT_SHARP
//                  | TOP;

bool_literal::=TRUE|FALSE;

primitive_type::=BOOL|num_type|CHAR;

primitive_literal::=CHAR_LITERAL|num_literal|STRING_LITERAL|bool_literal;

num_type::=INT|RAT|FLOAT;

num_literal::=INT_LITERAL|FLOAT_LITERAL|RAT_LITERAL;

top::=data_type;

top_literal::=data_literal;


//aggregate_data_type ::= DICT LEFT_SHARP basic_data_type COMMA basic_data_type RIGHT_SHARP
//                      | SEQ LEFT_SHARP basic_data_type RIGHT_SHARP;
//
//data_literal ::= basic_data_type
//            | aggregate_data_type;
aggre_type::=;

aggre_literal::=seq_literal
                |dict_literal
                ;
seq_literal::=LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET;
dict_literal::=LBRACE dict_context RBRACE;
data_literal::=primitive_literal
               |aggre_literal
               ;
data_type::=primitive_type|aggre_type;

//declaration_list ::= IDENTIFIER COLON data_literal
//                   | IDENTIFIER COLON data_literal COMMA declaration_list
//                   |;
//--------------------------------dictionary---------------------
decl_dict::=IDENTIFIER COLON DICT LEFT_SHARP key COMMA value_type RIGHT_SHARP ASSIGN LBRACE dict_context RBRACE;

//
dict_context::=key_literal SEMICOLON value
              |key_literal SEMICOLON value COMMA dict_context
              |;
key::=primitive_type|TOP;

key_literal::=num_expr;

value_type::=top;

value::=top_literal;

//----------------------------Sequence-------------------

decl_seq::=IDENTIFIER COLON SEQ LEFT_SHARP key RIGHT_SHARP ASSIGN LEFT_SQUARE_BRACKET seq_context RIGHT_SQUARE_BRACKET;

seq_value::=data_literal;

seq_context::= seq_value
              |seq_value COMMA seq_context
              |;

//--------------------declaration------------------
decl_primitive::=IDENTIFIER SEMICOLON primitive_type ASSIGN num_expr;

declaration ::=
              | decl_dict
              | decl_primitive
              | decl_seq;



num_operater ::= PLUS
           | MINUS
           | TIMES
           | DIVIDE
           | POWER
           | CONCATENATION;

bool_operator::=NOT
                |AND
                |OR
                |IMPLICATION
                |EQUAL
                |NOT_EQUAL;

compare_operator::=LEFT_SHARP
                   |RIGHT_SHARP
                   |IMPLICATION
                   |LEFT_SHARP_EQUAL
                   |EQUAL
                   |NOT_EQUAL;

bool_value_list::=bool_literal;

num_value_list::=IDENTIFIER
             |num_literal
             |IDENTIFIER LEFT_SQUARE_BRACKET num_value_list RIGHT_SQUARE_BRACKET
             |IDENTIFIER DOT LEN
             |IDENTIFIER LEFT_SQUARE_BRACKET num_value_list COLON
             |IDENTIFIER LEFT_SQUARE_BRACKET num_value_list COLON num_value_list
             |IDENTIFIER LEFT_SQUARE_BRACKET COLON num_value_list;


expr::=num_expr
      |bool_expr
      |con_expr;

con_expr::=seq_literal CONCATENATION seq_literal;

bool_expr::=bool_value_list
            |bool_value_list bool_operator bool_value_list
            |num_value_list compare_operator num_value_list
            |key IN aggre_literal;



num_expr::=num_value_list|num_value_list num_operater num_value_list;

//other_variable_list ::= other_variable
//                      | other_variable COMMA other_variable
//                      | ;
//
//other_variable ::= IDENTIFIER
//                 | NUMBER
//                 | QUESTION boolean QUESTION IDENTIFIER LPAREN other_variable_list RPAREN;
//seq.len
//returntype
//function name



















import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

      public boolean syntaxErrors;
      public void syntax_error(Symbol current_token) {  
          report_error(
              "Syntax error at line " + (current_token.left+1) + ", column "
      + current_token.right, null
          );
      }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal IDENTIFIER, LET, EQUAL, SEMICOL, PLUS, MINUS, MULT, DIV, UNDERSCORE, DOT, LCROCHET, RCROCHET, COMMA, COLON, LAGRA, RAGRA;
terminal LPAREN, RPAREN, RBRA, LBRA;
terminal BADCHAR;

// Keywords
terminal MAIN, PRINT, DICT,SEQ, TOP, LEN;

//Types Def
terminal TYPE_BOOL,TYPE_CHAR,TYPE_INT, TYPE_FLOAT,TYPE_RAT;
nonterminal type_dict, type_seq;

//Types value
terminal TRUE, FALSE, CHAR, INTEGER, STRING;
nonterminal int_val, rat_val, float_val, dict_val, seq_val, int_number;

//Dict/SEQ components
nonterminal dict_obj,dict_content,seq_content, len_property, index, slice;

// Non terminal blocks
nonterminal statements, statement, top_level;
nonterminal let_bind, full_exp, simple_exp, operator;


//Numerical helpers
nonterminal number, all_types, all_types_val;

// TODO:Delete test
nonterminal test;



precedence left PLUS, MINUS;
precedence left DIV, MULT;

// TODO:Delete test
test ::= all_types_val;
//        | simple_exp SEMICOL


top_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);
              :}
            ;

statements ::= statements:ss statement:s {:
                  Node n = (Node)ss;
                  n.addChild((Node)s);
                  RESULT = n;
               :}
             | /* empty */ {:
                  RESULT = new Node("Statements");
               :}
             ;

statement ::= let_bind:s {:
                RESULT = (Node)s;
              :}
            | full_exp:s {:
                RESULT = (Node)s;
              :}
            ;

full_exp ::= simple_exp:e SEMICOL {: RESULT = (Node)e; :};

simple_exp ::= INTEGER:i    {: RESULT = new Node(i); :}
             | IDENTIFIER:i {: RESULT = new Node(i); :}
//             | CHAR:i {: RESULT = new Node(i); :}
             | simple_exp:e1 operator:o simple_exp:e2 {:
                  Node n = (Node)o;
                  n.addChild((Node)e1);
                  n.addChild((Node)e2);
                  RESULT = n;
               :}
             | LPAREN simple_exp:e RPAREN {:
                 Node n = new Node("parens");
                 n.addChild(new Node("("));
                 n.addChild((Node)e);
                 n.addChild(new Node(")"));
                 RESULT = (Node)e;
               :}
             ;

operator ::= PLUS  {: RESULT = new Node("+"); :}
           | MINUS {: RESULT = new Node("-"); :}
           | MULT  {: RESULT = new Node("*"); :}
           | DIV   {: RESULT = new Node("/"); :}
           ;

let_bind ::= LET IDENTIFIER:i EQUAL full_exp:e {:
               Node n = new Node("LET");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             :};

// Numbers values def
number ::= INTEGER
        | number UNDERSCORE INTEGER;

int_val ::= number
        | MINUS number;
        //|len_property;

rat_val ::= int_val DIV number;

float_val ::= int_val DOT number;

int_number ::= len_property
            | int_val;
//            TODO add result of int operations here (same for the others)

// Types
// TODO: to complete with string, dict...
all_types ::= TYPE_BOOL
            | TYPE_CHAR
            | TYPE_INT
            | TYPE_FLOAT
            | TYPE_RAT
            | type_seq
            | type_dict;

// Types val TODO: replace _val with _number if needed
all_types_val ::= TRUE
                | FALSE
                | CHAR
                | rat_val
                | float_val
                | dict_val
                | seq_val
                | int_number
                | index
                | slice
                | STRING
                | IDENTIFIER;

// Dict
type_dict ::= DICT LCROCHET all_types COMMA all_types RCROCHET
            | DICT LCROCHET TOP COMMA all_types RCROCHET
            | DICT LCROCHET all_types COMMA TOP RCROCHET
            | DICT LCROCHET TOP COMMA TOP RCROCHET;

dict_val ::= LBRA dict_content RBRA;

dict_content ::= dict_obj
              | dict_obj COMMA dict_content
              | /* empty */ ;

dict_obj ::= all_types_val COLON all_types_val;

// Seq

type_seq ::= SEQ LCROCHET all_types RCROCHET
           | SEQ LCROCHET TOP RCROCHET;

seq_val ::= LAGRA seq_content RAGRA;

seq_content ::=  all_types_val
            | all_types_val COMMA seq_content
            | /* empty */  ;

//len
len_property ::= IDENTIFIER DOT LEN;
//index
index ::= IDENTIFIER LAGRA int_number RAGRA;
//slice
slice ::= IDENTIFIER LAGRA number COLON int_number RAGRA
        | IDENTIFIER LAGRA COLON int_number RAGRA
        | IDENTIFIER LAGRA number COLON RAGRA;

// TODO: add len as int for operations
// TODO: add a[index] for dictionnary and sequence